<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for JPluginSpeed.
 * Generated by PHPUnit on 2009-10-27 at 15:15:28.
 */
class JDispatcherSpeed extends PHPUnit_Framework_TestCase
{
	/**
	 * @var JPlugin
	 */
	protected $object;

	protected $_ready = false;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		jimport( 'joomla.plugin.plugin' );
		jimport( 'joomla.plugin.helper' );
		jimport( 'joomla.event.dispatcher' );
		jimport( 'joomla.application.component.helper' );
		require dirname( __FILE__ ) .DS. 'speedincludes' .DS. 'observable2.php';
		require dirname( __FILE__ ) .DS. 'speedincludes' .DS. 'dispatcher2.php';

		if ( $this->createPlugins() ) {
			$this->_ready = true;
		}

		JFactory::$session = new JObject();

		// Allocate enough memory and increase time limit
		set_time_limit( 600 ); // 10 minutes
		ini_set('memory_limit', '255M');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public function testJoomlaDispatcher()
	{
		if ( !$this->_ready ) {
			$this->markTestSkipped(
				'Test skipped, plgins not set up or not ready.'
				);
		}

		// Joomla dispatcher
		$this->timer_start();
		JPluginHelper::importPlugin( 'joomla' );
		print "Current dispatcher: starting...\n";
		$counter = 0;
		$this->triggerEvent( 'onSomeTrigger', array( &$counter ) );
		print "Current dispatcher: done.\n\tRan " . $counter
			. " times.\n\tTime: " . $this->timer_stop() . "\n";
	}

	/**
	 * A copy of the triggerEvent method from JApplication
	 */
	function triggerEvent($event, $args = null)
	{
		$dispatcher = JDispatcher::getInstance();

		return $dispatcher->trigger($event, $args);
	}

	/**
	 * A copy of the triggerEvent method from JApplication
	 * modified to use JDispatcher2
	 */
	function triggerEvent2($event, $args = null)
	{
		$dispatcher = JDispatcher2::getInstance();

		return $dispatcher->trigger($event, $args);
	}

	function createPlugins( $amount = 2000 )
	{
		$files = array(
			'php' => '<?php
defined(\'_JEXEC\') or die;

jimport( \'joomla.plugin.plugin\' );

class plgJoomlaJoomlaNUMBER extends JPlugin
{
	function __construct( &$subject, $config )
	{	
		parent::__construct( $subject, $config );
	}

	function onSomeTrigger( &$counter )
	{
		$counter = $counter + $this->params->get( \'value\', false );
	}
}
			',
			'xml' => '<?xml version="1.0" encoding="utf-8"?>
<extension version="1.7" type="plugin" group="joomla" method="upgrade">
	<name>plg_joomla_joomlaNUMBER</name>
    <author>Rafael Corral</author>
    <authorEmail>support@corephp.com</authorEmail>
    <authorUrl>http://www.rafaelcorral.com/</authorUrl>
    <copyright></copyright>
    <license>GNU/GPL</license>
    <creationDate>24-January-2010</creationDate>
	<version>1.0.0</version>
	<description>some description</description>
	<files>
		<filename plugin="joomlaNUMBER">joomlaNUMBER.php</filename>
	</files>
	<config>
		<fields name="params">
			<fieldset name="basic">
				<field name="value" type="text"
					default="1"
					description="Value"
					label="Value" />
			</fieldset>
		</fields>
	</config>
</extension>'
		);

		$sql = "
		INSERT INTO `#__extensions` (`name`, `type`, `element`, `folder`, `client_id`, `enabled`, `access`, `protected`, `manifest_cache`, `params`, `custom_data`, `system_data`, `checked_out`, `checked_out_time`, `ordering`, `state`)
		VALUES ('plg_joomla_joomlaNUMBER', 'plugin', 'joomlaNUMBER', 'joomla', 0, 1, 1, 0, '', '{\"value\":\"1\"}', '', '', 0, '0000-00-00 00:00:00', 0, 0)";

		return $this->createFiles( $files, $sql, 'joomla', $amount );
	}

	function createFiles( $files, $sql, $type, $amount )
	{
		jimport( 'joomla.filesystem.file' );
		jimport( 'joomla.database.database' );
		$db = JFactory::getDBO();

		if ( !$amount ) {
			return false;
		}

		// Delete all records in the DB for this plugin
		$db->setQuery("DELETE FROM #__extensions WHERE `type` = 'plugin' AND `folder` = '{$type}'");
		$db->query();

		// Delete plugin type folder
		JFolder::delete( JPATH_PLUGINS .DS. $type );

		for ( $i = 0; $i < $amount; $i++ ) {
			// Create files
			foreach ( $files as $ext => $content ) {
				$file = JPATH_PLUGINS .DS. $type .DS. $type .$i .DS. $type .$i. '.' . $ext;
				if ( JFile::exists( $file ) ) {
					continue;
				}
				JFile::write( $file, str_replace( 'NUMBER', $i, $content ) );
			}

			// Write sql
			$db->setQuery( str_replace( 'NUMBER', $i, $sql ) );
			$db->query();
		}

		return true;
	}

	function timer_start()
	{
		$mtime = explode( ' ', microtime() );
		$mtime = $mtime[1] + $mtime[0];
		$this->timestart = $mtime;

		return true;
	}

	function timer_stop( $display = 0, $precision = 3 )
	{
		$mtime = microtime();
		$mtime = explode( ' ', $mtime );
		$mtime = $mtime[1] + $mtime[0];
		$this->timeend = $mtime;
		$timetotal = $this->timeend - $this->timestart;
		$r = number_format( $timetotal, $precision );

		if ( $display ) {
			echo $r;
		}

		return $r;
	}
}
?>
