<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  HTML
 *
 * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM . '/cms/toolbar/toolbar.php';

/**
 * General inspector class for JToolbar.
 *
 * @package Joomla.UnitTest
 * @subpackage HTML
 * @since 11.3
 */
class JToolbarInspector extends JToolbar
{
	/**
	* Method for inspecting protected variables.
	*
	* @return mixed The value of the class variable.
	*/
	public function __get($name)
	{
		if (property_exists($this, $name)) {
			return $this->$name;
		} else {
			trigger_error('Undefined or private property: ' . __CLASS__.'::'.$name, E_USER_ERROR);
			return null;
		}
	}

	/**
	* Sets any property from the class.
	*
	* @param string $property The name of the class property.
	* @param string $value The value of the class property.
	*
	* @return void
	*/
	public function __set($property, $value)
	{
		$this->$property = $value;
	}
	
	/**
	 * Calls any inaccessible method from the class.
	 * 
	 * @param string 	$name Name of the method to invoke 
	 * @param array 	$parameters Parameters to be handed over to the original method
	 * 
	 * @return mixed The return value of the method 
	 */
	public function __call($name, $parameters = false)
	{
		return call_user_func_array(array($this,$name), $parameters);
	}
}

/**
 * Test class for JToolbar.
 * Generated by PHPUnit on 2009-10-27 at 15:38:36.
 */
class JToolbarTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var JToolbar
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new JToolbarInspector('test');
	}
	
	/**
	 * Test JToolbar::__construct().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 */
	public function test__construct()
	{
		$this->assertThat(
			$this->object->_name,
			$this->equalTo('test')
		);
		
		$path = $this->object->_buttonPath;
		
		foreach($path as &$el)
		{
			$el = str_replace(DIRECTORY_SEPARATOR, '/', $el);
		}
		
		$this->assertThat(
			$path,
			$this->equalTo(array(JPATH_PLATFORM.'/joomla/html/toolbar/button'))
		);
	}

	/**
	* Test the getInstance method.
	*
	* @return  void
	*
	* @since   11.3
	*/
	public function testGetInstance()
	{
		$object = JToolBar::getInstance();

		$this->assertThat(
			$object,
			$this->isInstanceOf('JToolBar')
		);
	}
	
	/**
	 * Test JToolbar::appendButton().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 */
	public function testAppendButton()
	{
		$this->assertThat(
			$this->object->_bar,
			$this->equalTo(array())
		);
		
		$this->object->appendButton('test1', 'test2', array('test3'));
		
		$this->assertThat(
			$this->object->_bar,
			$this->equalTo(array(array('test1', 'test2', array('test3'))))
		);
		
	}
	
	/**
	 * Test JToolbar::getItems().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 */
	public function testGetItems()
	{
		$this->object->_bar = array();
		
		$this->assertThat(
			$this->object->getItems(),
			$this->equalTo(array())
		);
		
		$this->object->_bar = array(array('test1'));
		
		$this->assertThat(
			$this->object->getItems(),
			$this->equalTo(array(array('test1')))
		);
	}
	
	/**
	 * Test JToolbar::getName().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 */
	public function testGetName()
	{
		$this->assertThat(
			$this->object->getName(),
			$this->equalTo('test')
		);
	}
	
	/**
	 * Test JToolbar::prependButton().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 */
	public function testPrependButton()
	{
		$this->object->_bar = array(array('test1'));
		
		$this->object->prependButton('test2');
		
		$this->assertThat(
			$this->object->_bar,
			$this->equalTo(array(array('test2'), array('test1')))
		);
	}

	/**
	 * Test JToolbar::render().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 * 
	 * @todo needs to be implemented
	 */
	public function testRender()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test JToolbar::renderButton().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 * 
	 * @todo needs to be implemented
	 */
	public function testRenderButton()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Test JToolbar::loadButtonType().
	 * 
	 * @return  void
	 * 
	 * @since   11.3
	 * 
	 * @todo needs to be implemented
	 */
	public function testLoadButtonType()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	public function testAddButtonPathString()
	{
		$initialValue = $this->readAttribute($this->object, '_buttonPath');
		$this->object->addButtonPath('MyTestPath');
		$newValue = $this->readAttribute($this->object, '_buttonPath');
		$this->assertThat(
			$newValue[0],
			$this->equalTo('MyTestPath'.DIRECTORY_SEPARATOR)
		);

		$initialCount = count($initialValue);

		for($i = 0; $i < $initialCount; $i++) {
			$this->assertThat(
				$initialValue[$i],
				$this->equalTo($newValue[$i+1])
			);
		}
	}

	public function testAddButtonPathArray()
	{
		$initialValue = $this->readAttribute($this->object, '_buttonPath');
		$this->object->addButtonPath(array('MyTestPath1', 'MyTestPath2'));
		$newValue = $this->readAttribute($this->object, '_buttonPath');
		$this->assertThat(
			$newValue[0],
			$this->equalTo('MyTestPath2'.DIRECTORY_SEPARATOR)
		);

		$this->assertThat(
			$newValue[1],
			$this->equalTo('MyTestPath1'.DIRECTORY_SEPARATOR)
		);

		$initialCount = count($initialValue);

		for($i = 0; $i < $initialCount; $i++) {
			$this->assertThat(
				$initialValue[$i],
				$this->equalTo($newValue[$i+2])
			);
		}
	}
}
