<?php
/**
 * @package     Joomla.UnitTest
 *
 * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

/**
 * Test class for JSession.
 * Generated by PHPUnit on 2011-10-26 at 19:33:07.
 */
class JSessionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var JSession
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->object = JSession::getInstance('none', array('expire' => 20, 'force_ssl' => true, 'name' => 'name', 'id' => 'id', 'security' => 'security'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

	/**
	 * Test cases for getInstance
	 * string	handler of type JSessionStorage: none or database
	 * array	arguments for $options in form of associative array
	 * string	message if test case fails
	 *
	 * @return array
	 */
	function casesGetInstance()
	{
		return array(
			'first_instance' => array(
				'none',
				array('expire' => 99),
				'Line: '.__LINE__.': '.'Should not be a different instance '
			),
			'second_instance' => array(
				'database',
				array('expire' => 15),
				'Line: '.__LINE__.': '.'Should not be a different instance '
			)
		);
	}
	/**
	 * @dataProvider casesGetInstance
	 * @covers  JSession::getInstance
	 */
	public function testGetInstance($store, $options)
	{
		$oldSession = $this->object;
		$newSession = JSession::getInstance($store, $options);
		$this->assertThat(
			$oldSession,
			$this->identicalTo($newSession)
		);
	}

	/**
     * @covers  JSession::getState
     */
	public function testGetState()
	{
		$this->assertEquals('inactive', $this->object->getState(), 'Session should be active');
	}

    /**
     * @covers  JSession::getExpire
     */
    public function testGetExpire()
    {
        $this->assertEquals(20, $this->object->getExpire(), 'Session expire should be 20');
    }

    /**
     * @todo Implement testGetToken().
     */
    public function testGetToken()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHasToken().
     */
    public function testHasToken()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetFormToken().
     */
    public function testGetFormToken()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers  JSession::getStores
     */
    public function testGetStores()
    {
		$return = JSession::getStores();

		$this->assertTrue(
			is_array($return),
			'Line: '.__LINE__.' JSession::getStores must return an array.'
		);
		$this->assertTrue(
			in_array('database', $return),
			'Line: '.__LINE__.' session storage database should always be available.'
		);
		$this->assertTrue(
			in_array('none', $return),
			'Line: '.__LINE__.' session storage "none" should always be available.'
		);
    }

    /**
     * @todo Implement testIsNew().
     */
    public function testIsNew()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet().
     */
    public function testSet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHas().
     */
    public function testHas()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClear().
     */
    public function testClear()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDestroy().
     */
    public function testDestroy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRestart().
     */
    public function testRestart()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFork().
     */
    public function testFork()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClose().
     */
    public function testClose()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
