<?php
/**
 * @package     Joomla.UnitTest
 *
 * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

/**
 * Test class for JSession.
 * Generated by PHPUnit on 2011-10-26 at 19:33:07.
 */
class JSessionTest extends TestCase
{
    /**
     * @var  JSession
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
		$this->saveFactoryState();

		$this->object = JSession::getInstance('none', array('expire' => 20, 'force_ssl' => true, 'name' => 'name', 'id' => 'id', 'security' => 'security'));
		$this->input  = new JInput;
		$this->input->cookie = $this->getMock('JInputCookie', array('set', 'get'));
		$this->object->initialise($this->input);

		$this->input->cookie->expects($this->any())
					->method('set');
        $this->input->cookie->expects($this->any())
					->method('get')
					->will($this->returnValue(null));

		$this->object->start();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		if (session_id())
		{
			session_unset();
			session_destroy();
		}

		$this->restoreFactoryState();
    }

	/**
	 * Test cases for getInstance
	 * string	handler of type JSessionStorage: none or database
	 * array	arguments for $options in form of associative array
	 * string	message if test case fails
	 *
	 * @return array
	 */
	function casesGetInstance()
	{
		return array(
			'first_instance' => array(
				'none',
				array('expire' => 99),
				'Line: '.__LINE__.': '.'Should not be a different instance '
			),
			'second_instance' => array(
				'database',
				array('expire' => 15),
				'Line: '.__LINE__.': '.'Should not be a different instance '
			)
		);
	}
	/**
	 * @dataProvider casesGetInstance
	 * @covers  JSession::getInstance
	 */
	public function testGetInstance($store, $options)
	{
		$oldSession = $this->object;
		$newSession = JSession::getInstance($store, $options);
		$this->assertThat(
			$oldSession,
			$this->identicalTo($newSession)
		);
	}

	/**
     * @covers  JSession::getState
     */
	public function testGetState()
	{
		$this->assertEquals('active', $this->object->getState(), 'Session should be active');
	}

    /**
     * @covers  JSession::getExpire
     */
    public function testGetExpire()
    {
        $this->assertEquals(20, $this->object->getExpire(), 'Session expire should be 20');
    }

    /**
     * @covers  JSession::getToken
     */
    public function testGetToken()
    {
		$this->object->set('session.token', 'abc');
		$this->assertEquals('abc', $this->object->getToken(), 'Token should be abc');

		$this->object->set('session.token', null);
		$token = $this->object->getToken();
		$this->assertEquals(32, strlen($token), 'Line: ' . __LINE__ . ' Token should be length 32');

		$token2 = $this->object->getToken(true);
		$this->assertNotEquals($token, $token2, 'Line: ' . __LINE__ . ' New token should be different');
    }

    /**
     * @covers  JSession::hasToken
     */
    public function testHasToken()
    {
		$token = $this->object->getToken();
		$this->assertTrue($this->object->hasToken($token), 'Line: '.__LINE__.' Correct token should be true');

		$this->assertFalse($this->object->hasToken('abc', false), 'Line: '.__LINE__.' Should return false with wrong token');
		$this->assertEquals('active', $this->object->getState(), 'Line: '.__LINE__.' State should not be set to expired');

		$this->assertFalse($this->object->hasToken('abc'), 'Line: '.__LINE__.' Should return false with wrong token');
		$this->assertEquals('expired', $this->object->getState(), 'Line: '.__LINE__.' State should be set to expired by default');
    }

    /**
     * @covers  JSession::getFormToken
     */
    public function testGetFormToken()
    {
		$user = JFactory::getUser();

		JFactory::$application = $this->getMock('JInputCookie', array('set', 'get'));
		JFactory::$application->expects($this->once())
					->method('get')
					->with($this->equalTo('secret'))
					->will($this->returnValue('abc'));

		$expected = md5('abc' . $user->get('id', 0) . $this->object->getToken(false));
		$this->assertEquals($expected, $this->object->getFormToken(), 'Form token should be calculated as above');
    }

    /**
     * @todo Implement testGetName().
     * @covers  JSession::hasToken
     */
    public function testGetName()
    {
		// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetId().
     * @covers  JSession::hasToken
     */
    public function testGetId()
    {
		// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers  JSession::getStores
     */
    public function testGetStores()
    {
		$return = JSession::getStores();

		$this->assertTrue(
			is_array($return),
			'Line: '.__LINE__.' JSession::getStores must return an array.'
		);
		$this->assertContains(
			'database',
			$return,
			'Line: '.__LINE__.' session storage database should always be available.'
		);
		$this->assertContains(
			'none',
			$return,
			'Line: '.__LINE__.' session storage "none" should always be available.'
		);
    }

    /**
     * @todo Implement testIsNew().
     */
    public function testIsNew()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSet().
     */
    public function testSet()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHas().
     */
    public function testHas()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClear().
     */
    public function testClear()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDestroy().
     */
    public function testDestroy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRestart().
     */
    public function testRestart()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFork().
     */
    public function testFork()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClose().
     */
    public function testClose()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
