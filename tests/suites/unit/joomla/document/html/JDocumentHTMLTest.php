<?php
/**
 * @package     Joomla.UnitTest
 *
 * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

include_once JPATH_PLATFORM . '/joomla/document/html/html.php';

/**
 * Test class for JDocumentHTML.
 * Generated by PHPUnit on 2011-10-26 at 19:36:23.
 */
class JDocumentHTMLTest extends PHPUnit_Framework_TestCase {

    /**
     * @var JDocumentHTML
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new JDocumentHTML;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testGetHeadData().
     */
    public function testGetHeadData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetHeadData().
     */
    public function testSetHeadData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMergeHeadData().
     */
    public function testMergeHeadData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddHeadLink().
     */
    public function testAddHeadLink() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddFavicon().
     */
    public function testAddFavicon() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAddCustomTag().
     */
    public function testAddCustomTag() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetBuffer().
     */
    public function testGetBuffer() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetBuffer().
     */
    public function testSetBuffer() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testParse().
     */
    public function testParse() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRender().
     */
    public function testRender() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCountModules().
     */
    public function testCountModules() {

		 // countModules parameter must be a string with an odd number of words
		 $this->assertThat(
			$this->object->countModules(''),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules invalid number of parameters failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 or'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules invalid number of parameters failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 or dummy2 or'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules invalid number of parameters failed.'
		);

		 //nonExistant conditions will be 0
		$this->assertThat(
			$this->object->countModules('dummy1'),
			$this->equalTo(0),
			'JDocumentHTMLTest->countModules single empty position failed.'
		);

		// simple operator logic with 2 positions which are both nonexistant/0
		$this->assertThat(
			$this->object->countModules('dummy1 + dummy2'),
			$this->equalTo(0),
			'JDocumentHTMLTest->countModules empty positions addition failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 - dummy2'),
			$this->equalTo(0),
			'JDocumentHTMLTest->countModules empty positions subtraction failed.'
		);

		 $this->assertThat(
			$this->object->countModules('dummy1 * dummy2'),
			$this->equalTo(0),
			'JDocumentHTMLTest->countModules empty positions multiplication failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 == dummy2'),
			$this->equalTo(true),
			'JDocumentHTMLTest->countModules empty positions equal comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 != dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions not equal comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 <> dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions not equal comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 < dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions less then comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 > dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions greater then comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 <= dummy2'),
			$this->equalTo(true),
			'JDocumentHTMLTest->countModules empty positions less then or equal to comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 >= dummy2'),
			$this->equalTo(true),
			'JDocumentHTMLTest->countModules empty positions greater then or equal to comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 and dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions and comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 or dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions or comparison failed.'
		);

		$this->assertThat(
			$this->object->countModules('dummy1 xor dummy2'),
			$this->equalTo(false),
			'JDocumentHTMLTest->countModules empty positions xor comparison failed.'
		);

		 //todo: create module positions in order to do simple tests with actual numbers

		 //todo: add complex condition tests

		 //todo: add invalid operator tests


        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been completed yet.'
        );
    }

	 /**
     * countModules divide by zero special case test
     */
    public function testCountModulesDivideByZeroWarning()
    {
		try {
			$this->object->countModules('dummy1 / dummy2');
			}
		catch (PHPUnit_Framework_Error_Warning $divideByZeroWarning) {
			return;
		}
		$this->fail('An divide by zeror error was expected but has not been raised.');

    }

    /**
     * @todo Implement testCountMenuChildren().
     */
    public function testCountMenuChildren() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
