<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Base
 *
 * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM.'/joomla/base/tree.php';

/**
 * Test class for JNode.
 * Generated by PHPUnit on 2009-10-08 at 11:47:03.
 */
class JNodeTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var	JNode
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new JNode;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * Tests adding a child to a new node.
	 *
	 * @group	JNode
	 * @covers	JNode::addChild
	 * @return void
	 */
	public function testAddChild() {
		$newParent = new JNode;
		$newParent->addChild( $this->object );
		$this->assertAttributeEquals(
			$newParent,
			'parent',
			$this->object
		);
	}

	/**
	 * Tests getting the parent of a node.
	 *
	 * @group	JNode
	 * @covers	JNode::getParent
	 * @return void
	 */
	public function testGetParent() {
		$this->assertEquals(
			null,
			$this->object->getParent(),
			'New node should have null parent'
		);
		$this->assertAttributeEquals(
			null,
			'parent',
			$this->object
		);
		$newParent = new JNode;
		$newParent->addChild( $this->object );
		$this->assertEquals(
			$newParent,
			$this->object->getParent(),
			'Node should have this parent'
		);
		$this->assertAttributeEquals(
			$newParent,
			'parent',
			$this->object
		);
	}

	/**
	 * Tests setting the parent of a node.
	 *
	 * @group	JNode
	 * @covers	JNode::setParent
	 * @return void
	 */
	public function testSetParent() {
		$newParent = new JNode;
		$this->object->setParent( $newParent );
		$this->assertAttributeEquals(
			$newParent,
			'parent',
			$this->object
		);
	}

	/**
	 * Tests finding if a node has children.
	 *
	 * @group	JNode
	 * @covers	JNode::hasChildren
	 * @return void
	 */
	public function testHasChildren() {
		$this->assertFalse(
			$this->object->hasChildren(),
			'New node should have no children'
		);
		$newChild = new JNode;
		$this->object->addChild( $newChild );
		$this->assertTrue(
			$this->object->hasChildren(),
			'Node should have children'
		);
	}

	/**
	 * Tests getting the children of a node.
	 *
	 * @group	JNode
	 * @covers	JNode::getChildren
	 * @return void
	 */
	public function testGetChildren() {
		$this->assertEquals(
			array(),
			$this->object->getChildren(),
			'New node should have null children'
		);
		$this->assertAttributeEquals(
			array(),
			'children',
			$this->object
		);

		$newChild = new JNode;
		$this->object->addChild( $newChild );
		$this->assertEquals(
			array( spl_object_hash($newChild) => $newChild ),
			$this->object->getChildren(),
			'Node should have the created child'
		);
		$this->assertAttributeEquals(
			array( spl_object_hash($newChild) => $newChild ),
			'children',
			$this->object
		);
	}
}
